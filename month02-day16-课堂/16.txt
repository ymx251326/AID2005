前情回顾

1. 线程 同步互斥方法

   e = Event()   e.set()   e.clear()   e.wait()

   lock = Lock()  lock.acquire()  lock.release()

2. GIL : 无法实现真正的并行，效率低

3. 网络并发模型

   多任务并发 ：　多线程网络并发　　多进程网络并发

4. ftp文件服务器　

　　* 思考流程　

　　* 总分　　* 通信协议　　* 请求应答模型

ftp 文件服务器

需求分析：
    【1】 分为服务端和客户端，要求可以有多个客户端同时操作。
    【2】 客户端可以查看服务器文件库中有什么文件。
    【3】 客户端可以从文件库中下载文件到本地。
    【4】 客户端可以上传一个本地文件到文件库。
    【5】 使用print在客户端打印命令输入提示，引导操作

技术点分析 ： C / S
    * 并发模型　：　多线程
    * 网络：　ＴＣＰ网络
    * 文件传输　：　　边读边发　　　边收边写

功能模块划分和封装　：　拆
　　　
　　　函数　　＋　　　类
　　　　

　　　* 搭建整体结构框架

　　　* 查看文件目录

     * 下载文件

     * 上传文件

通信协议：
    　　　　　　　　　　　　请求类型　　　　数据参量
    　获取文件列表　　　　　　LIST
      下载文件　　　　　　　　RETR　　　　　filename
      上传文件     　　　　　STOR　　     filename
      退出　　　　　　　　　　EXIT

具体功能逻辑

    　* 搭建整体结构框架
         服务端 ： tcp多线程并发模型

　　　* 查看文件目录

         客户端 ： 输入指令 list
                  发送请求
                  等待回复，根据回复请求做下一步处理
                  OK : 接收文件列表
                  FAIL : 结束

         服务端 ： 接收请求
                  判断请求是否可以满足
                  给出回复
                  OK ： 发送文件列表
                  FAIL : 结束

     * 下载文件
          客户端 ：　发送请求
          　　　　　　等待反馈
          　　　　　　OK  接收文件
          　　　　　　FAIL　结束

          服务端 ： 接收请求
                   判断文件是否存在，给出结果
                   ok 发送文件
                   FAIL 结束

     * 上传文件
          客户端 ：　发送请求
          　　　　　　等待反馈
          　　　　　　OK  上传文件
          　　　　　　FAIL　结束

          服务端 ： 接收请求
                   判断文件是否存在，给出结果
                   OK 接收送文件
                   FAIL 结束


cookie
 文件描述符 ： 每个IO在系统中都有一个系统分配的 >= 0的整数编号，即文件
 描述符

 特点: 不会重复, 每个文件描述符对应一个IO对象

 查看 ： IO对象.fileno()


练习1： 使用poll方法 改写 select_server。

作业：1. 重点代码 自己梳理清除
     2. 设计一个类