前情回顾

1.　网络传输过程　
　　ｔｃｐ首部

2.  多任务编程

    多任务  cpu  并发和并行

    目的 ：   多个任务构成的应用程序，提高程序的执行效率

3. 进程 Process

   什么是进程
   PID  进程状态  父子进程

4. multiprocessing

   p = Process()
   p.start()
   p.join()

练习1 ： 编写一个程序
* 使用单进程 求100000以内质数之和  记录所用时间
* 使用4个进程，将100000拆分为4份，分别求每部分中质数之和 记录时间
* 使用10个进程，将100000拆分为10份，分别求每部分中质数之和 记录时间

练习2 ： 拷贝一个目录
编写程序完成，将一个文件夹拷贝一份
* 假设文件夹中只有普通文件
* 将每个文件的拷贝作为一个拷贝事件
* 使用进程池完成事件

提示 ： os.mkdir('name')

练习3 ：
在练习2的基础上完成

在拷贝的过程中实时显示拷贝内容的百分比

提示： 文件夹的 = 所有文件大小之和


群聊聊天室

需求分析 ： 要点 -》构建出软件的基本使用方法
    【1】 有人进入聊天室需要输入姓名，姓名不能重复
    【2】 有人进入聊天室时，其他人会收到通知：xxx 进入了聊天室
    【3】 一个人发消息，其他人会收到：xxx ： xxxxxxxxxxx
    【4】 有人退出聊天室，则其他人也会收到通知:xxx退出了聊天室

技术分析 ： 使用的技术

    * C / S 模型

    * 服务端存储用户信息 ： 姓名 和 address
      [(name,address),....]

      {name:address}

      class Person:
        def __init__(self,name,address):
            self.name = name
            self.address = address

    * 网络通信 ： udp

    * 消息传输机制:  客户端 ---》 服务端 --》转发给其他客户端

    * 收发消息互不影响 ： 多进程，一个进程负责收消息，一个负责发消息

功能模块分析

    * 整体框架设计
    * 进入聊天室
    * 聊天
    * 退出聊天室

    封装 ： 函数


通信协议设计

模块逻辑设计
    * 整体框架设计

    * 进入聊天室

    * 聊天

    * 退出聊天室

优化完善

作业 ： 1. 思考过程，自己想一遍
       2. 尝试写一个功能


